name: Semantic Release and Skin Packaging

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Extract version from Git tag
        id: get_version
        shell: pwsh
        run: |
          try {
            $version = git describe --tags --abbrev=0
          } catch {
            Write-Host "‚ö†Ô∏è No tags found. Defaulting to 0.0.0"
            $version = "0.0.0"
          }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          Write-Host "üì¶ Version set to $version"

      - name: Install Rainmeter and locate SkinInstaller.exe
        shell: pwsh
        run: |
          $url = "https://github.com/rainmeter/rainmeter/releases/download/v4.5.18.3727/Rainmeter-4.5.18.exe"
          $path = "$env:RUNNER_TEMP\RainmeterSetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $path
          Start-Process -Wait -FilePath $path -ArgumentList "/S"

          $candidates = @(
            "C:\Program Files\Rainmeter\SkinInstaller.exe",
            "C:\Program Files (x86)\Rainmeter\SkinInstaller.exe"
          )

          foreach ($p in $candidates) {
            if (Test-Path $p) {
              Copy-Item $p .\
              Write-Host "‚úîÔ∏è Found and copied SkinInstaller.exe from $p"
              break
            }
          }

          if (-not (Test-Path ".\SkinInstaller.exe")) {
            Write-Error "‚ùå SkinInstaller.exe not found"
            exit 1
          }

      - name: Package all skins
        shell: pwsh
        run: |
          Set-Location $env:GITHUB_WORKSPACE
          $skins = @("4000 English Words") # Add more skin directories as needed
          mkdir RMSKIN

          foreach ($skin in $skins) {
            Write-Host "`nüì¶ Packaging: $skin"
            $target = "RMSKIN\$skin"
            Copy-Item -Path $skin -Destination $target -Recurse

            if (Test-Path "@Resources") {
              Copy-Item -Path "@Resources" -Destination "$target\@Resources" -Recurse
              Write-Host "‚úÖ Copied @Resources into $skin"
            }

            ./SkinInstaller.exe $target /S /Log

            $package = "RMSKIN\$skin.rmskin"
            if (Test-Path $package) {
              Rename-Item $package "$skin-$env:VERSION.rmskin"
              Write-Host "üéâ Packaged $skin-$env:VERSION.rmskin"
            } else {
              Write-Host "‚ùå Failed to create .rmskin for $skin"
            }
          }

      - name: Show packaging logs
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Filter InstallLog.txt | ForEach-Object {
            Write-Host "`nüìù Log: $($_.FullName)"
            Get-Content $_.FullName
          }

      - name: Upload all .rmskin packages
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.rmskin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List output files
        run: dir /s /b *.rmskin